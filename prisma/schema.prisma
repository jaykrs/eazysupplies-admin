// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  countryCode     String?   @map("country_code")
  phone           String?
  profileImageId  Int?
  systemReserve   Boolean   @default(false)
  status          Int       @default(0)
  createdById     Int?
  updatedById     Int?
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  roleId         Int
  role           Role  @relation(fields: [roleId], references: [id])
  orders          Order[]
  wallet          Wallet?
  point           Point?
  otp             Int       @default(0)
}

model Role {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  guardName   String          @default("web")
  systemReserve Boolean       @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User[]
}


model Order {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  totalAmount    Decimal  @default(0.0)
  status         String   @default("pending")
  paymentMethod  String?
  paymentStatus  String   @default("unpaid")
  shippingAddress String?
  billingAddress  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Wallet {
  id         Int     @id @default(autoincrement())
  consumer   User    @relation(fields: [consumerId], references: [id])
  consumerId Int     @unique
  balance    Decimal @default(0.0)
}

model Point {
  id         Int    @id @default(autoincrement())
  consumer   User   @relation(fields: [consumerId], references: [id])
  consumerId Int    @unique
  balance    Int    @default(0)
}

model Product {
  id                        Int      @id @default(autoincrement())
  name                      String?
  short_description         String
  type                      String
  unit                      String
  weight                    Int      @default(0)
  quality                   Int      @default(0)
  price                     Int      @default(0)
  sale_price                Int      @default(0)
  discount                  Int?
  is_featured               Int
  shipping_days             Int?
  is_cod                    Int      @default(0)
  is_free_shipping          Int      @default(0)
  is_sale_enable            Int      @default(0)
  is_return                 Int      @default(0)
  is_trending               Int      @default(0)
  is_approved               Int      @default(0)
  is_external               Int      @default(0)
  external_url              String?  // changed from Int to String?
  external_button_text      String?
  sale_starts_at            DateTime?
  sale_expired_at           DateTime?
  sku                       String
  is_random_related_products Int     @default(0)
  stock_status              String
  meta_title                String
  meta_description          String
  product_thumbnail_id      Int
  product_meta_image_id     String
  size_chart_image_id       String
  reviewRatings           ReviewRating[]
  relatedProducts         RelatedProduct[] @relation("RelatedProducts")
  relatedToProducts       RelatedProduct[] @relation("RelatedToProducts")
}

model ReviewRating {
  id         Int      @id @default(autoincrement())
  rating     Int      // The rating (e.g., 1 to 5)
  comment    String?  // Optional review text
  createdAt  DateTime @default(now())
  
  // Foreign key relation
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}

model RelatedProduct {
  id                Int     @id @default(autoincrement())
  
  product           Product @relation("RelatedProducts", fields: [productId], references: [id])
  productId         Int

  relatedProduct    Product @relation("RelatedToProducts", fields: [relatedProductId], references: [id])
  relatedProductId  Int
}





