// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  roleId    Int
  status    Boolean   @default(false)
  profileImagepath String?
  lastLoginDt    DateTime?
  countryCode String    @default("+91")
  phone     String
  role      Role      @relation(fields: [roleId], references: [id])
  orders    Order[]
  cart      Cart?
  otp        Int       @default(0)
  payments  Payment[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  createdBy Int?  
  wishlist       String?
  favorite       String?     
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  createdBy Int?  
  permission String?
}

model Wallet {
  id         Int     @id @default(autoincrement())
  consumerId Int     @unique
  balance    Decimal @default(0.0)
}

model Point {
  id         Int  @id @default(autoincrement())
  consumerId Int  @unique
  balance    Int  @default(0)
}

model Tax {
  id         Int  @id @default(autoincrement())
  name String?
  description String?
  value    Float  @default(0.0)
}
model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int          @default(0)
  categoryId  Int
  brandId     Int
  category    Category     @relation(fields: [categoryId], references: [id])
  brand       Brand        @relation(fields: [brandId], references: [id])
  tags        String?
  sku         String?
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  productIcon  String?
  productImage String?
  createdBy    Int?
  dimension    String?
  keyword      String?
  ordersCount  Int?
  tax          Int?
}

model Blog {
  id                 Int       @id @default(autoincrement())
  title              String
  slug               String    @unique
  description        String?
  image               String?
  url                 String?
  content            String?
  meta_title         String?
  meta_description   String?
  keyword             String?
   createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  createdBy Int? 
} 

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

//model ProductTag {
//  productId Int
//  tagId     Int
//  product   Product @relation(fields: [productId], references: [id])
//  tag       Tag     @relation(fields: [tagId], references: [id])
//  @@id([productId, tagId])
// }

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  shipping   Shipping?
  payment    Payment?
  status     String      @default("PENDING") // PENDING, PAID, SHIPPED, COMPLETED, CANCELLED
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int       @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model Shipping {
  id        Int     @id @default(autoincrement())
  orderId   Int     @unique
  address   String
  city      String
  state     String
  postalCode String
  country   String
  status    String   @default("PENDING") // PENDING, SHIPPED, DELIVERED
  order     Order   @relation(fields: [orderId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model Payment {
  id        Int     @id @default(autoincrement())
  userId    Int
  orderId   Int     @unique
  amount    Float
  method    String  // CARD, UPI, PAYPAL, COD
  status    String  @default("PENDING") // PENDING, SUCCESS, FAILED
  user      User    @relation(fields: [userId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model template {
  id      Int     @id @default(autoincrement())
  name   String  @unique
  jsonData Json?   // This field can store arbitrary JSON data
  settings Json    @default("{}") // Example with a default empty JSON object
  htmlData  String?   @db.Text // Use @db.Text for potentially large HTML content in SQL databases
  createdAt DateTime @default(now())
  updatedAt   DateTime     @updatedAt @map("updated_at")
}