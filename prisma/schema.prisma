// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  countryCode    String?   @map("country_code")
  phone          String?
  profileImageId Int?
  systemReserve  Boolean   @default(false)
  status         Int       @default(0)
  createdById    Int?
  updatedById    Int?
  lastLoginDt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  roleId         Int
  role           Role      @relation(fields: [roleId], references: [id])
  orders         Order[]
  wallet         Wallet?
  point          Point?
  otp            Int       @default(0)
  wishlist       String?
  favorite       String?
  Blog           Blog[]
}

model Role {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  guardName     String   @default("web")
  systemReserve Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User[]
  Vendor        Vendor[]
}

model Order {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  totalAmount     Decimal  @default(0.0)
  status          String   @default("pending")
  paymentMethod   String?
  paymentStatus   String   @default("unpaid")
  shippingAddress String?
  billingAddress  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Wallet {
  id         Int     @id @default(autoincrement())
  consumer   User    @relation(fields: [consumerId], references: [id])
  consumerId Int     @unique
  balance    Decimal @default(0.0)
}

model Point {
  id         Int  @id @default(autoincrement())
  consumer   User @relation(fields: [consumerId], references: [id])
  consumerId Int  @unique
  balance    Int  @default(0)
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String    @unique
  description     String?
  metaTitle       String?   @map("meta_title")
  metaDescription String?   @map("meta_description")
  type            String
  commissionRate  Float?    @map("commission_rate")
  parentId        Int?      @map("parent_id")
  createdById     Int       @map("created_by_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  status          Int       @default(0)
  updatedAt       DateTime @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  blogsCount      Int       @default(0) @map("blogs_count")
  productsCount   Int       @default(0) @map("products_count")

  categoryImageId     Int?
  categoryMetaImageId Int?
  categoryIconId      Int?

  // Relations
  parent        Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategories")
  Product       Product?   @relation(fields: [productId], references: [id])
  productId     Int?
  Blog          Blog?      @relation(fields: [blogId], references: [id])
  blogId        Int?
}

model Brand {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String    @unique
  metaTitle       String?   @map("meta_title")
  metaDescription String?   @map("meta_description")
  status          Int       @default(0)
  createdById     Int?       @map("created_by_id")
  createdAt       DateTime @default(now())  @map("created_at")
  updatedAt       DateTime @updatedAt  @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  // Relations
  brandImage      String?
  brandMetaImage  String?
  brandBanner     String?
}

model Tag {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique
  type          String // e.g., 'post'
  description   String?
  status        Int     @default(0)
  createdById   Int?
  createdAt     DateTime  @default(now())  @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  blogsCount    Int       @default(0) @map("blogs_count")
  productsCount Int       @default(0) @map("products_count") // likely 0 for blog categories

  // Relations
  blogs     Blog[]
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?  
}

model Attribute {
  id            Int       @id @default(autoincrement())
  name          String
  style         String?
  slug          String    @unique
  status        Int       @default(1)
  created_by_id String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime? @map("deleted_at")

  // Relations
  attribute_values AttributeValue[]
  Product          Product?         @relation(fields: [productId], references: [id])
  productId        Int?
}

model AttributeValue {
  id            Int       @id @default(autoincrement())
  value         String
  hex_color     String? // Optional, nullable
  slug          String    @unique
  attribute_id  Int
  created_by_id String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime? @map("deleted_at")

  // Relations
  attribute Attribute @relation(fields: [attribute_id], references: [id])
}

model Product {
  id                         Int       @id @default(autoincrement())
  name                       String
  short_description          String?
  description                String?
  type                       String?
  unit                       String?
  weight                     String?
  quantity                   String?
  price                      Float?    @default(0.0)
  sale_price                 Float?    @default(0.0)
  discount                   Float?    @default(0)
  is_featured                Int?      @default(0)
  shipping_days              Int?      @default(0)
  is_cod                     Int?
  is_free_shipping           Int?      @default(0)
  is_sale_enable             Int?      @default(0)
  is_return                  Int?      @default(0)
  is_trending                Int?      @default(0)
  is_approved                Int?      @default(0)
  is_external                Int?      @default(0)
  external_url               String?
  external_button_text       String?
  sale_starts_at             DateTime?
  sale_expired_at            DateTime?
  sku                        String?
  is_random_related_products Int?      @default(0)
  stock_status               String?
  meta_title                 String?
  meta_description           String?
  product_thumbnail_id       Int?
  product_meta_image_id      Int?
  size_chart_image_id        String?
  estimated_delivery_text    String?
  return_policy_text         String?
  safe_checkout              Int?      @default(0)
  secure_checkout            Int?      @default(0)
  social_share               Int?      @default(0)
  encourage_order            Int?
  encourage_view             Int?
  slug                       String?
  status                     Int?      @default(0)
  store_id                   Int?
  created_by_id              String?
  tax_id                     String?
  preview_type               String?
  product_type               String?
  separator                  String?
  is_licensable              Boolean?  @default(false)
  license_type               String?
  preview_url                String?
  watermark                  Boolean?  @default(false)
  watermark_position         String?
  brand_id                   Int?
  watermark_image_id         String?
  wholesale_price_type       String?
  is_licensekey_auto         Boolean?  @default(false)
  preview_audio_file_id      Int?
  preview_video_file_id      Int?

  deleted_at DateTime? @map("deleted_at")
  created_at DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt @map("updated_at")

  orders_count  Int?
  reviews_count Int?
  can_review    Boolean? @default(false)
  order_amount  Float?   @default(0.0)
  is_wishlist   Boolean? @default(false)
  rating_count  Int?

  // Stored as raw JSON
  review_ratings      Json?
  related_products    Json?
  cross_sell_products Json?
  wholesales          Json?
  variations          Json?
  product_galleries   Json?
  brand               Json?
  reviews             Json?
  similar_products    Json?
  cross_products      Json?

  // Relations
  attributes Attribute[] // Must define Attribute model
  categories Category[] // Must define Category model
  tags       Tag[] // Must define Tag model
  store      Store?      @relation(fields: [storeId], references: [id]) // Must define Store model
  storeId    Int?
}

model Store {
  id                Int       @id @default(autoincrement())
  store_name        String
  description       String?
  slug              String
  store_logo_id     Int?
  store_cover_id    Int?
  country_id        Int
  state_id          Int
  city              String
  address           String
  pincode           String
  facebook          String?
  twitter           String?
  instagram         String?
  youtube           String?
  pinterest         String?
  hide_vendor_email Boolean   @default(false)
  hide_vendor_phone Boolean   @default(false)
  vendor_id         Int
  created_by_id     String?
  status            Int       @default(1)
  is_approved       Boolean   @default(false)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime? @map("deleted_at")
  orders_count      Int?      @default(0)
  reviews_count     Int?      @default(0)
  products_count    Int?      @default(0)
  order_amount      Float?    @default(0.0)
  rating_count      Int?      @default(0)

  // Relations
  vendor         Vendor? @relation(fields: [vendor_id], references: [id])
  country        String?
  state          String?
  reviews        Json? // You can convert this to a relation if needed
  product_images Json? // Array of image URLs

  products Product[] // Assumes one-to-many Store → Products
}

model Vendor {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  country_code      String
  phone             BigInt
  profile_image_id  Int?
  system_reserve    String?   @default("0")
  status            Int       @default(1)
  created_by_id     Int?
  email_verified_at DateTime?
  created_at        DateTime  @default(now())
  orders_count      Int?      @default(0)

  role_id Int?
  role    Role? @relation(fields: [role_id], references: [id])

  profile_image Json? // Placeholder; replace with relation if needed
  wallet        Json?
  point         Json?

  stores Store[]
}

model Blog {
  id                 Int       @id @default(autoincrement())
  title              String
  slug               String    @unique
  description        String?
  content            String?
  meta_title         String?
  meta_description   String?
  blog_thumbnail_id  Int?
  blog_meta_image_id Int?
  is_featured        Boolean   @default(false)
  is_sticky          Boolean   @default(false)
  status             Boolean   @default(true)
  created_by_id      Int
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  blog_thumbnail  Json?
  blog_meta_image Json?
  categories      Category[]
  tags            Tag[]
  created_by      User?      @relation(fields: [userId], references: [id])
  userId          Int?

  @@map("blogs")
}
